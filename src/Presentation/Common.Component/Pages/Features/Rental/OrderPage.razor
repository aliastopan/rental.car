@page "/order/{CarId:int}"

@using Domain.Models
@using Infrastructure.Services
@using Infrastructure.Persistence
@inject FileManager FileManager
@inject AppDbContext AppDbContext


<PageTitle>Order</PageTitle>

<EditForm Model="@Order" OnValidSubmit="@SendOrder">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="__container bg-light">
        <InputText
            id="fullname"
            class="form-control __gap"
            placeholder="Nama Lengkap"
            @bind-Value="Order.FullName">
        </InputText>
        <InputText
            id="contact"
            class="form-control __gap"
            placeholder="Contact WhatsApp"
            @bind-Value="Order.ContactNumber">
        </InputText>
        <label for="picture-profile">Unggah KTP</label>
        <InputFile
            id="unggah-ktp"
            class="form-control __gap"
            OnChange="@OnInputFileChange">
        </InputFile>
        <label for="dob"> Tanggal Pengambilan: </label>
        <InputDate
            for="dob"
            class="form-control __gap"
            @onchange="RentDurationCalc"
            @bind-Value="Order.DateDepart">
        </InputDate>
        <label for="dob"> Tanggal Pengembalian: </label>
        <InputDate
            for="dob"
            class="form-control __gap"
            @onchange="RentDurationCalc"
            @bind-Value="Order.DateReturn">
        </InputDate>
        <div class="__gap">
            <span>Lama Peminjaman: @rentDuration hari</span>
        </div>
        <div class="__gap">
            <span>Total Biaya: Rp.@cost</span>
        </div>
        <button
            class="btn btn-primary __gap"
            @onclick="DebugValue">
            DEBUG VALUE
        </button>
        <button
            class="btn btn-primary __gap"
            @onclick="SendOrder"
            type="submit">
            Order
        </button>

    </div>
</EditForm>



@code{

    [ParameterAttribute]
    public int CarId { get; set; }
    public Order Order { get; set; } = new Order();
    private int rentDuration;

    private int cost;
    private IBrowserFile? file;
    private string subfolder = $"images/ktp";
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        var x = Order.DateDepart;
        file = e.File;
        Order.KTP = FileManager.GetFilePath(file, subfolder);
    }

    public void DebugValue()
    {
        RentDurationCalc();
        CostCalc();
    }

    public void CostCalc()
    {
        @* cost = 250000 * rentDuration;
        Order.Cost = cost; *@
        cost = Order.Cost;
    }

    public void RentDurationCalc()
    {
        System.Console.WriteLine($"Date Depart: {Order.DateDepart}");
        System.Console.WriteLine($"Date Return: {Order.DateReturn}");
        int duration = Order.RentDuration;
        rentDuration = duration >= 0 ? duration : 0;
    }

    private void UploadKTP()
    {

    }

    private async Task SendOrder()
    {
        if(rentDuration > 0)
            await UploadFile();
    }

    private async Task UploadFile()
    {
        if(file is not null)
        {
            await FileManager!.UploadAsync(file, subfolder);
            var (car, result) = AppDbContext.GetCar(CarId);
            car.Status = !car.Status;

            Order.Car = car;

        }
    }
}